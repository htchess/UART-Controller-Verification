`timescale 1ns/1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 05/13/2023 02:29:58 PM
// Design Name: 
// Module Name: Txt_ua
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module Txt_ua1(
    input clk,
    input [7:0] data,
    input transmit,
    input reset,
    output reg Txd
    );
    
    //internal variables
    
    reg [3:0] bit_counter ; //counter to count the 10 bit
    reg [13:0] baudrate_counter;  //9600bps
    reg[9:0]shiftright_register;
    reg state ,next_state ;
    reg shift ; 
    reg load ; 
    reg clear ;
    
    //uart transmission
    
    always @(posedge clk)
    begin 
    if(reset)
    begin
    state <= 0 ;
    bit_counter <= 0 ;
    baudrate_counter <= 0;
    end
    else begin
    baudrate_counter <=  baudrate_counter + 1;
    if( baudrate_counter == 10415)
    begin
    state <= next_state;
    baudrate_counter <= 0;
    if(load)
    shiftright_register <= {1'b1,data,1'b0};
    if(clear)
    bit_counter <= 0;
    if(shift)
    shiftright_register <= shiftright_register>>1;
    bit_counter <= bit_counter + 1;
    end
    end
    end
    
    //Mealay Machine ,state Machine
    
    always@ (posedge clk)
    begin
    load <= 0 ;
    shift <= 0 ;
    //clear <=0;
    Txd <= 1;
     //idle state
     case(state)
    0 : begin
       if(transmit)
       begin
       next_state <= 1;
       load <= 1;
       shift <= 0;
      // clear <= 0;
       end
       else begin
       next_state <= 0;
       Txd <= 1;
       end
       end
   //Transmitting state
    1 : begin
      if(bit_counter ==10)
      begin
      next_state <= 0;
     // clear <= 1;
      end
      else begin
      next_state <= 1;
      Txd <= shiftright_register[0];
      shift <= 1;
      
      end
      end
      default: next_state <= 0;
      endcase
      end
     
 endmodule
